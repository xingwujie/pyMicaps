# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.0
#
# <auto-generated>
#
# Generated from file `apiinterface.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module cma
_M_cma = Ice.openModule('cma')
__name__ = 'cma'

# Start of module cma.cimiss
_M_cma.cimiss = Ice.openModule('cma.cimiss')
__name__ = 'cma.cimiss'

if '_t_RequestParams' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss._t_RequestParams = IcePy.defineDictionary('::cma::cimiss::RequestParams', (), IcePy._t_string, IcePy._t_string)

if '_t_StringArray' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss._t_StringArray = IcePy.defineSequence('::cma::cimiss::StringArray', (), IcePy._t_string)

if '_t_FloatArray' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss._t_FloatArray = IcePy.defineSequence('::cma::cimiss::FloatArray', (), IcePy._t_float)

if '_t_CommonArray' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss._t_CommonArray = IcePy.defineSequence('::cma::cimiss::CommonArray', (), _M_cma.cimiss._t_StringArray)

if '_t_GridArray' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss._t_GridArray = IcePy.defineSequence('::cma::cimiss::GridArray', (), _M_cma.cimiss._t_FloatArray)

if 'RequestInfo' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss.RequestInfo = Ice.createTempClass()
    class RequestInfo(object):
        def __init__(self, errorCode=0, errorMessage='', requestElems='', requestParams='', requestTime='', responseTime='', rowCount=0, takeTime=0):
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.requestElems = requestElems
            self.requestParams = requestParams
            self.requestTime = requestTime
            self.responseTime = responseTime
            self.rowCount = rowCount
            self.takeTime = takeTime

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.errorCode)
            _h = 5 * _h + Ice.getHash(self.errorMessage)
            _h = 5 * _h + Ice.getHash(self.requestElems)
            _h = 5 * _h + Ice.getHash(self.requestParams)
            _h = 5 * _h + Ice.getHash(self.requestTime)
            _h = 5 * _h + Ice.getHash(self.responseTime)
            _h = 5 * _h + Ice.getHash(self.rowCount)
            _h = 5 * _h + Ice.getHash(self.takeTime)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_cma.cimiss.RequestInfo):
                return NotImplemented
            else:
                if self.errorCode is None or other.errorCode is None:
                    if self.errorCode != other.errorCode:
                        return (-1 if self.errorCode is None else 1)
                else:
                    if self.errorCode < other.errorCode:
                        return -1
                    elif self.errorCode > other.errorCode:
                        return 1
                if self.errorMessage is None or other.errorMessage is None:
                    if self.errorMessage != other.errorMessage:
                        return (-1 if self.errorMessage is None else 1)
                else:
                    if self.errorMessage < other.errorMessage:
                        return -1
                    elif self.errorMessage > other.errorMessage:
                        return 1
                if self.requestElems is None or other.requestElems is None:
                    if self.requestElems != other.requestElems:
                        return (-1 if self.requestElems is None else 1)
                else:
                    if self.requestElems < other.requestElems:
                        return -1
                    elif self.requestElems > other.requestElems:
                        return 1
                if self.requestParams is None or other.requestParams is None:
                    if self.requestParams != other.requestParams:
                        return (-1 if self.requestParams is None else 1)
                else:
                    if self.requestParams < other.requestParams:
                        return -1
                    elif self.requestParams > other.requestParams:
                        return 1
                if self.requestTime is None or other.requestTime is None:
                    if self.requestTime != other.requestTime:
                        return (-1 if self.requestTime is None else 1)
                else:
                    if self.requestTime < other.requestTime:
                        return -1
                    elif self.requestTime > other.requestTime:
                        return 1
                if self.responseTime is None or other.responseTime is None:
                    if self.responseTime != other.responseTime:
                        return (-1 if self.responseTime is None else 1)
                else:
                    if self.responseTime < other.responseTime:
                        return -1
                    elif self.responseTime > other.responseTime:
                        return 1
                if self.rowCount is None or other.rowCount is None:
                    if self.rowCount != other.rowCount:
                        return (-1 if self.rowCount is None else 1)
                else:
                    if self.rowCount < other.rowCount:
                        return -1
                    elif self.rowCount > other.rowCount:
                        return 1
                if self.takeTime is None or other.takeTime is None:
                    if self.takeTime != other.takeTime:
                        return (-1 if self.takeTime is None else 1)
                else:
                    if self.takeTime < other.takeTime:
                        return -1
                    elif self.takeTime > other.takeTime:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_cma.cimiss._t_RequestInfo)

        __repr__ = __str__

    _M_cma.cimiss._t_RequestInfo = IcePy.defineStruct('::cma::cimiss::RequestInfo', RequestInfo, (), (
        ('errorCode', (), IcePy._t_int),
        ('errorMessage', (), IcePy._t_string),
        ('requestElems', (), IcePy._t_string),
        ('requestParams', (), IcePy._t_string),
        ('requestTime', (), IcePy._t_string),
        ('responseTime', (), IcePy._t_string),
        ('rowCount', (), IcePy._t_int),
        ('takeTime', (), IcePy._t_int)
    ))

    _M_cma.cimiss.RequestInfo = RequestInfo
    del RequestInfo

if 'RetArray2D' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss.RetArray2D = Ice.createTempClass()
    class RetArray2D(object):
        def __init__(self, data=None, request=Ice._struct_marker):
            self.data = data
            if request is Ice._struct_marker:
                self.request = _M_cma.cimiss.RequestInfo()
            else:
                self.request = request

        def __hash__(self):
            _h = 0
            if self.data:
                for _i0 in self.data:
                    if _i0:
                        for _i1 in _i0:
                            _h = 5 * _h + Ice.getHash(_i1)
            _h = 5 * _h + Ice.getHash(self.request)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_cma.cimiss.RetArray2D):
                return NotImplemented
            else:
                if self.data is None or other.data is None:
                    if self.data != other.data:
                        return (-1 if self.data is None else 1)
                else:
                    if self.data < other.data:
                        return -1
                    elif self.data > other.data:
                        return 1
                if self.request is None or other.request is None:
                    if self.request != other.request:
                        return (-1 if self.request is None else 1)
                else:
                    if self.request < other.request:
                        return -1
                    elif self.request > other.request:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_cma.cimiss._t_RetArray2D)

        __repr__ = __str__

    _M_cma.cimiss._t_RetArray2D = IcePy.defineStruct('::cma::cimiss::RetArray2D', RetArray2D, (), (
        ('data', (), _M_cma.cimiss._t_CommonArray),
        ('request', (), _M_cma.cimiss._t_RequestInfo)
    ))

    _M_cma.cimiss.RetArray2D = RetArray2D
    del RetArray2D

if 'RetGridArray2D' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss.RetGridArray2D = Ice.createTempClass()
    class RetGridArray2D(object):
        def __init__(self, data=None, request=Ice._struct_marker, startLat=0.0, startLon=0.0, endLat=0.0, endLon=0.0, latCount=0, lonCount=0, lonStep=0.0, latStep=0.0):
            self.data = data
            if request is Ice._struct_marker:
                self.request = _M_cma.cimiss.RequestInfo()
            else:
                self.request = request
            self.startLat = startLat
            self.startLon = startLon
            self.endLat = endLat
            self.endLon = endLon
            self.latCount = latCount
            self.lonCount = lonCount
            self.lonStep = lonStep
            self.latStep = latStep

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_cma.cimiss.RetGridArray2D):
                return NotImplemented
            else:
                if self.data != other.data:
                    return False
                if self.request != other.request:
                    return False
                if self.startLat != other.startLat:
                    return False
                if self.startLon != other.startLon:
                    return False
                if self.endLat != other.endLat:
                    return False
                if self.endLon != other.endLon:
                    return False
                if self.latCount != other.latCount:
                    return False
                if self.lonCount != other.lonCount:
                    return False
                if self.lonStep != other.lonStep:
                    return False
                if self.latStep != other.latStep:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_cma.cimiss._t_RetGridArray2D)

        __repr__ = __str__

    _M_cma.cimiss._t_RetGridArray2D = IcePy.defineStruct('::cma::cimiss::RetGridArray2D', RetGridArray2D, (), (
        ('data', (), _M_cma.cimiss._t_GridArray),
        ('request', (), _M_cma.cimiss._t_RequestInfo),
        ('startLat', (), IcePy._t_float),
        ('startLon', (), IcePy._t_float),
        ('endLat', (), IcePy._t_float),
        ('endLon', (), IcePy._t_float),
        ('latCount', (), IcePy._t_int),
        ('lonCount', (), IcePy._t_int),
        ('lonStep', (), IcePy._t_float),
        ('latStep', (), IcePy._t_float)
    ))

    _M_cma.cimiss.RetGridArray2D = RetGridArray2D
    del RetGridArray2D

if 'FileInfo' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss.FileInfo = Ice.createTempClass()
    class FileInfo(object):
        def __init__(self, fileName='', savePath='', suffix='', size='', fileUrl='', imgBase64='', attributes=None):
            self.fileName = fileName
            self.savePath = savePath
            self.suffix = suffix
            self.size = size
            self.fileUrl = fileUrl
            self.imgBase64 = imgBase64
            self.attributes = attributes

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.fileName)
            _h = 5 * _h + Ice.getHash(self.savePath)
            _h = 5 * _h + Ice.getHash(self.suffix)
            _h = 5 * _h + Ice.getHash(self.size)
            _h = 5 * _h + Ice.getHash(self.fileUrl)
            _h = 5 * _h + Ice.getHash(self.imgBase64)
            if self.attributes:
                for _i0 in self.attributes:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_cma.cimiss.FileInfo):
                return NotImplemented
            else:
                if self.fileName is None or other.fileName is None:
                    if self.fileName != other.fileName:
                        return (-1 if self.fileName is None else 1)
                else:
                    if self.fileName < other.fileName:
                        return -1
                    elif self.fileName > other.fileName:
                        return 1
                if self.savePath is None or other.savePath is None:
                    if self.savePath != other.savePath:
                        return (-1 if self.savePath is None else 1)
                else:
                    if self.savePath < other.savePath:
                        return -1
                    elif self.savePath > other.savePath:
                        return 1
                if self.suffix is None or other.suffix is None:
                    if self.suffix != other.suffix:
                        return (-1 if self.suffix is None else 1)
                else:
                    if self.suffix < other.suffix:
                        return -1
                    elif self.suffix > other.suffix:
                        return 1
                if self.size is None or other.size is None:
                    if self.size != other.size:
                        return (-1 if self.size is None else 1)
                else:
                    if self.size < other.size:
                        return -1
                    elif self.size > other.size:
                        return 1
                if self.fileUrl is None or other.fileUrl is None:
                    if self.fileUrl != other.fileUrl:
                        return (-1 if self.fileUrl is None else 1)
                else:
                    if self.fileUrl < other.fileUrl:
                        return -1
                    elif self.fileUrl > other.fileUrl:
                        return 1
                if self.imgBase64 is None or other.imgBase64 is None:
                    if self.imgBase64 != other.imgBase64:
                        return (-1 if self.imgBase64 is None else 1)
                else:
                    if self.imgBase64 < other.imgBase64:
                        return -1
                    elif self.imgBase64 > other.imgBase64:
                        return 1
                if self.attributes is None or other.attributes is None:
                    if self.attributes != other.attributes:
                        return (-1 if self.attributes is None else 1)
                else:
                    if self.attributes < other.attributes:
                        return -1
                    elif self.attributes > other.attributes:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_cma.cimiss._t_FileInfo)

        __repr__ = __str__

    _M_cma.cimiss._t_FileInfo = IcePy.defineStruct('::cma::cimiss::FileInfo', FileInfo, (), (
        ('fileName', (), IcePy._t_string),
        ('savePath', (), IcePy._t_string),
        ('suffix', (), IcePy._t_string),
        ('size', (), IcePy._t_string),
        ('fileUrl', (), IcePy._t_string),
        ('imgBase64', (), IcePy._t_string),
        ('attributes', (), _M_cma.cimiss._t_StringArray)
    ))

    _M_cma.cimiss.FileInfo = FileInfo
    del FileInfo

if '_t_FileInfoList' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss._t_FileInfoList = IcePy.defineSequence('::cma::cimiss::FileInfoList', (), _M_cma.cimiss._t_FileInfo)

if 'RetFilesInfo' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss.RetFilesInfo = Ice.createTempClass()
    class RetFilesInfo(object):
        def __init__(self, fileInfos=None, request=Ice._struct_marker):
            self.fileInfos = fileInfos
            if request is Ice._struct_marker:
                self.request = _M_cma.cimiss.RequestInfo()
            else:
                self.request = request

        def __hash__(self):
            _h = 0
            if self.fileInfos:
                for _i0 in self.fileInfos:
                    _h = 5 * _h + Ice.getHash(_i0)
            _h = 5 * _h + Ice.getHash(self.request)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_cma.cimiss.RetFilesInfo):
                return NotImplemented
            else:
                if self.fileInfos is None or other.fileInfos is None:
                    if self.fileInfos != other.fileInfos:
                        return (-1 if self.fileInfos is None else 1)
                else:
                    if self.fileInfos < other.fileInfos:
                        return -1
                    elif self.fileInfos > other.fileInfos:
                        return 1
                if self.request is None or other.request is None:
                    if self.request != other.request:
                        return (-1 if self.request is None else 1)
                else:
                    if self.request < other.request:
                        return -1
                    elif self.request > other.request:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_cma.cimiss._t_RetFilesInfo)

        __repr__ = __str__

    _M_cma.cimiss._t_RetFilesInfo = IcePy.defineStruct('::cma::cimiss::RetFilesInfo', RetFilesInfo, (), (
        ('fileInfos', (), _M_cma.cimiss._t_FileInfoList),
        ('request', (), _M_cma.cimiss._t_RequestInfo)
    ))

    _M_cma.cimiss.RetFilesInfo = RetFilesInfo
    del RetFilesInfo

_M_cma.cimiss._t_DataAPIAccess = IcePy.defineValue('::cma::cimiss::DataAPIAccess', Ice.Value, -1, (), False, True, None, ())

if 'DataAPIAccessPrx' not in _M_cma.cimiss.__dict__:
    _M_cma.cimiss.DataAPIAccessPrx = Ice.createTempClass()
    class DataAPIAccessPrx(Ice.ObjectPrx):

        def callAPItoarray2D(self, usrId, pwd, interfaceId, remoteIP, language, version, params, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItoarray2D.invoke(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params), context))

        def callAPItoarray2DAsync(self, usrId, pwd, interfaceId, remoteIP, language, version, params, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItoarray2D.invokeAsync(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params), context))

        def begin_callAPItoarray2D(self, usrId, pwd, interfaceId, remoteIP, language, version, params, _response=None, _ex=None, _sent=None, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItoarray2D.begin(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params), _response, _ex, _sent, context))

        def end_callAPItoarray2D(self, _r):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItoarray2D.end(self, _r)

        def callAPItogridArray2D(self, usrId, pwd, interfaceId, remoteIP, language, version, params, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItogridArray2D.invoke(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params), context))

        def callAPItogridArray2DAsync(self, usrId, pwd, interfaceId, remoteIP, language, version, params, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItogridArray2D.invokeAsync(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params), context))

        def begin_callAPItogridArray2D(self, usrId, pwd, interfaceId, remoteIP, language, version, params, _response=None, _ex=None, _sent=None, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItogridArray2D.begin(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params), _response, _ex, _sent, context))

        def end_callAPItogridArray2D(self, _r):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItogridArray2D.end(self, _r)

        def callAPItosaveAsFile(self, usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat, savePath, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItosaveAsFile.invoke(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat, savePath), context))

        def callAPItosaveAsFileAsync(self, usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat, savePath, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItosaveAsFile.invokeAsync(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat, savePath), context))

        def begin_callAPItosaveAsFile(self, usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat, savePath, _response=None, _ex=None, _sent=None, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItosaveAsFile.begin(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat, savePath), _response, _ex, _sent, context))

        def end_callAPItosaveAsFile(self, _r):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItosaveAsFile.end(self, _r)

        def callAPItodownFile(self, usrId, pwd, interfaceId, remoteIP, language, version, params, saveDir, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItodownFile.invoke(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, saveDir), context))

        def callAPItodownFileAsync(self, usrId, pwd, interfaceId, remoteIP, language, version, params, saveDir, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItodownFile.invokeAsync(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, saveDir), context))

        def begin_callAPItodownFile(self, usrId, pwd, interfaceId, remoteIP, language, version, params, saveDir, _response=None, _ex=None, _sent=None, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItodownFile.begin(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, saveDir), _response, _ex, _sent, context))

        def end_callAPItodownFile(self, _r):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItodownFile.end(self, _r)

        def callAPItofileList(self, usrId, pwd, interfaceId, remoteIP, language, version, params, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItofileList.invoke(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params), context))

        def callAPItofileListAsync(self, usrId, pwd, interfaceId, remoteIP, language, version, params, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItofileList.invokeAsync(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params), context))

        def begin_callAPItofileList(self, usrId, pwd, interfaceId, remoteIP, language, version, params, _response=None, _ex=None, _sent=None, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItofileList.begin(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params), _response, _ex, _sent, context))

        def end_callAPItofileList(self, _r):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItofileList.end(self, _r)

        def callAPItoserializedStr(self, usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItoserializedStr.invoke(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat), context))

        def callAPItoserializedStrAsync(self, usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItoserializedStr.invokeAsync(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat), context))

        def begin_callAPItoserializedStr(self, usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat, _response=None, _ex=None, _sent=None, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItoserializedStr.begin(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat), _response, _ex, _sent, context))

        def end_callAPItoserializedStr(self, _r):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItoserializedStr.end(self, _r)

        def callAPItostoreArray2D(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreArray2D.invoke(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D), context))

        def callAPItostoreArray2DAsync(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreArray2D.invokeAsync(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D), context))

        def begin_callAPItostoreArray2D(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D, _response=None, _ex=None, _sent=None, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreArray2D.begin(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D), _response, _ex, _sent, context))

        def end_callAPItostoreArray2D(self, _r):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreArray2D.end(self, _r)

        def callAPItostoreFileByFtp(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D, ftpfiles, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreFileByFtp.invoke(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D, ftpfiles), context))

        def callAPItostoreFileByFtpAsync(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D, ftpfiles, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreFileByFtp.invokeAsync(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D, ftpfiles), context))

        def begin_callAPItostoreFileByFtp(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D, ftpfiles, _response=None, _ex=None, _sent=None, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreFileByFtp.begin(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D, ftpfiles), _response, _ex, _sent, context))

        def end_callAPItostoreFileByFtp(self, _r):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreFileByFtp.end(self, _r)

        def callAPItostoreSerializedStr(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inString, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreSerializedStr.invoke(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, inString), context))

        def callAPItostoreSerializedStrAsync(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inString, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreSerializedStr.invokeAsync(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, inString), context))

        def begin_callAPItostoreSerializedStr(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inString, _response=None, _ex=None, _sent=None, context=None):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreSerializedStr.begin(self, ((usrId, pwd, interfaceId, remoteIP, language, version, params, inString), _response, _ex, _sent, context))

        def end_callAPItostoreSerializedStr(self, _r):
            return _M_cma.cimiss.DataAPIAccess._op_callAPItostoreSerializedStr.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_cma.cimiss.DataAPIAccessPrx.ice_checkedCast(proxy, '::cma::cimiss::DataAPIAccess', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_cma.cimiss.DataAPIAccessPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::cma::cimiss::DataAPIAccess'
    _M_cma.cimiss._t_DataAPIAccessPrx = IcePy.defineProxy('::cma::cimiss::DataAPIAccess', DataAPIAccessPrx)

    _M_cma.cimiss.DataAPIAccessPrx = DataAPIAccessPrx
    del DataAPIAccessPrx

    _M_cma.cimiss.DataAPIAccess = Ice.createTempClass()
    class DataAPIAccess(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::cma::cimiss::DataAPIAccess')

        def ice_id(self, current=None):
            return '::cma::cimiss::DataAPIAccess'

        @staticmethod
        def ice_staticId():
            return '::cma::cimiss::DataAPIAccess'

        def callAPItoarray2D(self, usrId, pwd, interfaceId, remoteIP, language, version, params, current=None):
            raise NotImplementedError("servant method 'callAPItoarray2D' not implemented")

        def callAPItogridArray2D(self, usrId, pwd, interfaceId, remoteIP, language, version, params, current=None):
            raise NotImplementedError("servant method 'callAPItogridArray2D' not implemented")

        def callAPItosaveAsFile(self, usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat, savePath, current=None):
            raise NotImplementedError("servant method 'callAPItosaveAsFile' not implemented")

        def callAPItodownFile(self, usrId, pwd, interfaceId, remoteIP, language, version, params, saveDir, current=None):
            raise NotImplementedError("servant method 'callAPItodownFile' not implemented")

        def callAPItofileList(self, usrId, pwd, interfaceId, remoteIP, language, version, params, current=None):
            raise NotImplementedError("servant method 'callAPItofileList' not implemented")

        def callAPItoserializedStr(self, usrId, pwd, interfaceId, remoteIP, language, version, params, dataFormat, current=None):
            raise NotImplementedError("servant method 'callAPItoserializedStr' not implemented")

        def callAPItostoreArray2D(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D, current=None):
            raise NotImplementedError("servant method 'callAPItostoreArray2D' not implemented")

        def callAPItostoreFileByFtp(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inArray2D, ftpfiles, current=None):
            raise NotImplementedError("servant method 'callAPItostoreFileByFtp' not implemented")

        def callAPItostoreSerializedStr(self, usrId, pwd, interfaceId, remoteIP, language, version, params, inString, current=None):
            raise NotImplementedError("servant method 'callAPItostoreSerializedStr' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_cma.cimiss._t_DataAPIAccessDisp)

        __repr__ = __str__

    _M_cma.cimiss._t_DataAPIAccessDisp = IcePy.defineClass('::cma::cimiss::DataAPIAccess', DataAPIAccess, (), None, ())
    DataAPIAccess._ice_type = _M_cma.cimiss._t_DataAPIAccessDisp

    DataAPIAccess._op_callAPItoarray2D = IcePy.Operation('callAPItoarray2D', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_cma.cimiss._t_RequestParams, False, 0)), (), ((), _M_cma.cimiss._t_RetArray2D, False, 0), ())
    DataAPIAccess._op_callAPItogridArray2D = IcePy.Operation('callAPItogridArray2D', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_cma.cimiss._t_RequestParams, False, 0)), (), ((), _M_cma.cimiss._t_RetGridArray2D, False, 0), ())
    DataAPIAccess._op_callAPItosaveAsFile = IcePy.Operation('callAPItosaveAsFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_cma.cimiss._t_RequestParams, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_cma.cimiss._t_RetFilesInfo, False, 0), ())
    DataAPIAccess._op_callAPItodownFile = IcePy.Operation('callAPItodownFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_cma.cimiss._t_RequestParams, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_cma.cimiss._t_RetFilesInfo, False, 0), ())
    DataAPIAccess._op_callAPItofileList = IcePy.Operation('callAPItofileList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_cma.cimiss._t_RequestParams, False, 0)), (), ((), _M_cma.cimiss._t_RetFilesInfo, False, 0), ())
    DataAPIAccess._op_callAPItoserializedStr = IcePy.Operation('callAPItoserializedStr', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_cma.cimiss._t_RequestParams, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataAPIAccess._op_callAPItostoreArray2D = IcePy.Operation('callAPItostoreArray2D', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_cma.cimiss._t_RequestParams, False, 0), ((), _M_cma.cimiss._t_CommonArray, False, 0)), (), ((), _M_cma.cimiss._t_RequestInfo, False, 0), ())
    DataAPIAccess._op_callAPItostoreFileByFtp = IcePy.Operation('callAPItostoreFileByFtp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_cma.cimiss._t_RequestParams, False, 0), ((), _M_cma.cimiss._t_CommonArray, False, 0), ((), _M_cma.cimiss._t_StringArray, False, 0)), (), ((), _M_cma.cimiss._t_RequestInfo, False, 0), ())
    DataAPIAccess._op_callAPItostoreSerializedStr = IcePy.Operation('callAPItostoreSerializedStr', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_cma.cimiss._t_RequestParams, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_int, False, 0), ())

    _M_cma.cimiss.DataAPIAccess = DataAPIAccess
    del DataAPIAccess

# End of module cma.cimiss

__name__ = 'cma'

# End of module cma
